// Lets learn promise from basic to advance - So promise is an empty object which returns completion or failure of the asycn operations ...


// This is how we produce promise - so basically i know oops concepts i have studuied in c++ promise is a node we have created by class and Promise() is a constructuor by which we call and passed one function it takes a function which have 2 states resolve and reject.new keyword is used to create a new object and this is a syntax to produce or create the promises....
function createCart(cart) {
    const prom = new Promise(function (resolve, reject) {
        if (!cart) {
            const error = new Error("Your cart does not exits brother");
            reject(error);
        }

        const orderid = "123456789";
        if (orderid) {
            setTimeout(() => {
                resolve(orderid);
            }, 3000)
        }

    });
    return prom;
}


// Now we are goint to recive or cnsume the promise let us see how we actually consume promise --->
const cart = ["jeans", "Kurtas", "Shirts", "jwellary"];
const dataThroughPromise = createCart(null);


// this is how we attach callbacks to the promise if promise is resolved do this task....by using .then higher order function which takes a callback function...
dataThroughPromise.then((orderid) => {
    console.log("Your cart is created and your order id is ", orderid);
}).catch((error) => {
    console.log(error);

})














// Now i am going to explian you everything how this code of whole file is working when the browser html parser encounter the script it take script file as the input and js engine v8 actually start doing its work by doing the tokenization of the code the whle code f the file is break down into the smaller smaller part which called token this phase is called as tokenization of the code . once the tokens are generated the code structure is converted into the tree like structure where each tokens represents diffrent part of code and this is generated by the abstract syntax parser.Now the code passes to the interprator ignition and compiler turbo fan which compiles the code during excecution phase this is known as just in time compilation turbo fan generates the byte code after performing memory optimization,garbage collecting, and then ignition excecutes code and then global object window is given to the js engine by the browser and global excecution context is created into the two phase memory enviorment and thread of excution.before running the single line of code variable component allocate memory for all the variables and function and rest is i know no need to right forward.....